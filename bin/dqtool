#!/usr/bin/env python

import sys
import os
import optparse
import json

current = os.path.dirname(os.path.abspath(__file__))
parent = os.path.dirname(current)
sys.path.append(parent)


from iatidq.models import *
import iatidq.dqsurveys
import iatidq.dqorganisations
import iatidq.dqpackages
import iatidq.dqregistry
import iatidq.dqdownload

def clear_survey(options):
    organisation_code = options.organisation_code
    assert organisation_code

    iatidq.dqsurveys.deleteSurveyData(organisation_code)

def get_package_names(organisation_code):
    for p in iatidq.dqorganisations.organisationPackages(
        organisation_code=organisation_code):
        yield p.Package.package_name

def list_packages(options):
    organisation_code = options.organisation_code
    assert organisation_code

    for p in get_package_names(organisation_code):
        print p

def reload_packages(options):
    organisation_code = options.organisation_code
    assert organisation_code

    for p in get_package_names(organisation_code):
        iatidq.dqregistry.refresh_package_by_name(p)
        iatidq.dqregistry.activate_packages([(p, True)], clear_revision_id=True)
        iatidq.dqdownload.run(package_name=p)

def compare_aggregation(options):
    organisation_code = options.organisation_code.decode('ascii')
    filename = options.filename
    assert organisation_code
    assert filename

    from iatidq import dqorganisations

    expected_data = json.load(file(filename))

    org_id = dqorganisations.organisationid_by_code(organisation_code)

    from iatidq import db
    
    sql = '''select package_id, aggregateresulttype_id, test_id, 
                  result_hierarchy, results_data, results_num 
           from aggregateresult where organisation_id = %s 
           order by id;'''

    results = map(list, db.engine.execute(sql, (org_id, )))

    if results == expected_data:
        print "PASS"
        sys.exit(0)
    else:
        print json.dumps(results, indent=2)
        sys.exit(1)

def compare_summary(options):
    assert options.organisation_code
    assert options.filename
    organisation_code = options.organisation_code.decode('ascii')
    filename = options.filename

    aggregation_type = 2

    from iatidq import dqorganisations

    expected_data = json.load(file(filename))

    organisation = dqorganisations.organisation_by_code(organisation_code)

    aggregate_results = dqorganisations._organisation_detail(
        organisation, aggregation_type)

    aggregate_results = json.loads(json.dumps(aggregate_results, 
                                              sort_keys=True))

    if aggregate_results == expected_data:
        print "PASS"
        sys.exit(0)
    else:
        print json.dumps(aggregate_results, indent=2, sort_keys=True)
        sys.exit(1)

def list_modes(options):
    for key in sorted(modes.keys()):
        print key

modes = {
    "clear-survey": clear_survey,
    "list-packages": list_packages,
    "reload-packages": reload_packages,
    "compare-aggregation": compare_aggregation,
    "compare-summary": compare_summary,
    "list-modes": list_modes
    }

def run():
    parser = optparse.OptionParser()
    parser.add_option("--mode", dest="mode",
                      action="store")
    parser.add_option("--organisation", dest="organisation_code",
                      action="store")
    parser.add_option("--filename", dest="filename",
                      action="store")
    options, rest = parser.parse_args()

    if not options.mode:
        print "Must specify a mode"
        sys.exit(1)
    
    if options.mode not in modes:
        print "Mode must be one of:"
        for mode in modes:
            print "  ", mode

    modes[options.mode](options)

if __name__ == '__main__':
    run()
