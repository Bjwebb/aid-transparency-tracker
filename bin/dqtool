#!/usr/bin/env python

import argparse
import json
import os
import sys

from iatidataquality import db
from iatidq import dqorganisations, dqindicators, models, queue, summary
import iatidq.survey
import iatidq.dqpackages
import iatidq.dqregistry
import iatidq.dqdownload
import iatidq.dqcsv
import iatidq.test_queue
import sample_work.db


def clear_survey(options):
    assert options.organisation_code

    organisation_code = options.organisation_code.decode('ascii')

    try:
        iatidq.survey.data.deleteSurveyData(organisation_code)
    except iatidq.survey.data.NoSuchSurvey:
        print "No such survey"
        sys.exit(1)

def create_survey(options):
    assert options.organisation_code

    organisation_code = options.organisation_code.decode('ascii')

    org_id = dqorganisations.organisationid_by_code(organisation_code)

    _ = iatidq.survey.data.getOrCreateSurveyById(org_id)

def get_package_names(organisation_code):
    for p in dqorganisations.organisationPackages(
        organisation_code=organisation_code):
        yield p.Package.package_name

def list_packages(options):
    organisation_code = options.organisation_code
    assert organisation_code

    for p in get_package_names(organisation_code):
        print p

# where p is the package name
def do_reload_package(package_name, no_refresh):
    if not no_refresh:
        iatidq.dqregistry.refresh_package_by_name(package_name)
    iatidq.dqregistry.activate_packages([(package_name, True)], 
                                        clear_revision_id=True)
    iatidq.dqregistry.clear_hash(package_name)
    iatidq.dqdownload.run(package_name=package_name)

def reload_packages(options):
    assert options.organisation_code

    organisation_code = options.organisation_code.decode('ascii')

    for p in get_package_names(organisation_code):
        try:
            do_reload_package(p, options.no_refresh)
        except Exception as e:
            print "Error reloading: %s" % e

def reload_package(options):
    assert options.package_name

    package_name = options.package_name.decode('ascii')

    do_reload_package(package_name, options.no_refresh)

def compare_aggregation(options):
    assert options.organisation_code

    organisation_code = options.organisation_code.decode('ascii')
    filename = options.filename
    assert filename

    expected_data = json.load(file(filename))

    org_id = dqorganisations.organisationid_by_code(organisation_code)

    sql = '''select package_id, aggregateresulttype_id, test_id, 
                  result_hierarchy, results_data, results_num 
           from aggregateresult where organisation_id = %s 
           order by id;'''

    results = map(list, db.engine.execute(sql, (org_id, )))

    if results == expected_data:
        print "PASS"
        sys.exit(0)
    else:
        print json.dumps(results, indent=2)
        sys.exit(1)

def associate_test(options):
    assert options.test_id
    assert options.indicator

    sql = '''select id from indicator where name = %s'''
    results = db.engine.execute(sql, (options.indicator,)).fetchall()

    assert len(results) == 1
    (indicator_id, ) = results[0]

    sql = '''insert into indicatortest (test_id, indicator_id)
               values (%s, %s);'''

    db.engine.execute(sql, (options.test_id, indicator_id))

def compare_summary(options):
    assert options.organisation_code

    organisation_code = options.organisation_code.decode('ascii')

    aggregation_type = 2

    organisation = dqorganisations.organisation_by_code(organisation_code)

    s = summary.PublisherSummaryCreator(organisation, aggregation_type)
    observed_summary_results = json.loads(json.dumps(s.summary.summary(), 
                                                     sort_keys=True))

    print json.dumps(observed_summary_results, indent=2, sort_keys=True)

def compare_indicators_summary(options): 
    assert options.organisation_code

    organisation_code = options.organisation_code.decode('ascii')

    aggregation_type = 2

    organisation = dqorganisations.organisation_by_code(organisation_code)

    s = summary.PublisherIndicatorsSummaryCreator(organisation,
                                                  aggregation_type)
    print json.dumps(s.summary.summary(),
                                sort_keys=True,
                                indent=2)

def make_survey_data(options):
    assert options.organisation_code

    organisation_code = options.organisation_code.decode('ascii')
    org_id = dqorganisations.organisationid_by_code(organisation_code)
    print "faking survey for %s" % organisation_code

    while True:
        make_survey_data_for_current_workflow(organisation_code)

def make_survey_data_for_current_workflow(organisation_code):
    survey, workflow = iatidq.survey.data.getSurvey(organisation_code)

    print "current workflow: %s" % workflow.name

    indicators = dqindicators.indicators(indicatorgroup=u"2018index")

    for indicator in indicators:
        data = {
            'organisationsurvey_id': survey.id,
            'indicator_id': indicator.id,
            'workflow_id': workflow.id,
            'published_status': 1,
            'published_source': "hello",
            'published_comment': "hello",
            'published_format': 2,
            'published_accepted': 1.0,
            'ordinal_value': "50"
            }

        iatidq.survey.data.addSurveyData(data)

    iatidq.survey.data.advanceSurvey(survey)
        

def make_csv_output(options):
    organisations = models.Organisation.query.all()
    s = iatidq.dqcsv.make_csv(organisations, True, True)
    print s.read()

def clear_queues(options):

    [ queue.delete_queue(queue_name) for queue_name in
                ['iati_download_queue', 'iati_tests_queue'] ]

def test_package(options):
    package_name = options.package_name
    package_id = options.package_id
    
    assert package_name or package_id
    
    filename = options.filename
    assert filename

    runtime_id = options.runtime_id  # which may be None

    if package_id is not None:
        assert runtime_id is not None
        iatidq.test_queue._test_one_package(filename, package_id, runtime_id)
    else:
        iatidq.test_queue.test_one_package(filename, package_name, runtime_id)

def test_packages(options):
    org_code = options.organisation_code
    assert org_code

    sql = '''
        select package_name from organisation 
            left join organisationpackage on organisation.id = organisation_id
            left join package on package_id = package.id 
            where organisation_code = %s and active = 't';
    '''
    results = db.engine.execute(sql, (org_code,))
    package_names = [ row[0] for row in results.fetchall() ]
    
    for package_name in package_names:
        iatidq.test_queue.test_one_package(filename, package_name)


class NoAggregateResults(Exception): pass

def get_aggregate_result_runtime_for_package(package_id):
    sql = '''select id, runtime_datetime from package_tested 
               left join runtime on runtime = id
               where package_id = %s;'''

    results = db.engine.execute(sql, (package_id,)).fetchall()

    if len(results) != 1:
        raise NoAggregateResults

    return tuple(results[0])

def get_package_name(package_id):
    sql = '''select package_name from package where id = %s'''
    results = db.engine.execute(sql, (package_id,))
    package_name = results.fetchall()[0][0]
    return package_name

def check_package_results(options):
    package_name = options.package_name
    assert package_name or options.all_packages
    if options.all_packages:
        assert options.organisation_code
    
    ''' find list of expected aggregations
        is set complete?
        get timestamps
        sort by timestamps
        report oldest timestamp'''

    first = lambda x : x.__getitem__(0)

    if options.all_packages:
        org_code = options.organisation_code
        sql = '''select id from organisation where organisation_code = %s;'''
        results = db.engine.execute(sql, (org_code,))
        rows = results.fetchall()
        if len(rows) == 0:
            print "No organisation found for code `%s'" % org_code
            sys.exit(1)

        org_id = rows[0][0]

        sql = '''select package_id from organisationpackage 
                   left join package on package_id = package.id 
                   where organisation_id = %s and 
                   package_name not like %s;'''
        package_ids = [row[0] for row in db.engine.execute(
                sql, (org_id, '%-org'))]
    else:
        sql = '''select id from package where package_name = %s'''
        package_ids = [row[0] for row in db.engine.execute(
                sql, (package_name,))]

    if len(package_ids) == 0:
        print "No packages, let alone test results, found"
        sys.exit(1)

    if not options.all_packages:
        assert len(package_ids) == 1

    oldest = None
    broken = False

    for package_id in package_ids:
        pkg_name = get_package_name(package_id)

        try:
            runtime_id, date = get_aggregate_result_runtime_for_package(
                package_id)
            print "%s,%d,%s,%s" % (pkg_name, runtime_id,
                                date.strftime('%Y-%m-%d %H:%M:%S'),"OK")

            if oldest is None or oldest > date:
                oldest = date

        except NoAggregateResults as exc:
            print "%s,,,No completion ever recorded" % pkg_name
            broken = True

    if broken:
        print "Some package(s) missing"
    else:
        print "All packages tested; oldest was at: %s" % oldest.strftime('%Y-%m-%d %H:%M:%S')

def update_frequencies(options):
    dqorganisations.downloadOrganisationFrequency()

def update_sampling(options):
    def get_all_results():
        results = sample_work.db.get_total_results()
        ots = sample_work.db.get_summary_org_test(results)
        failed = lambda ot : not ot['pass']
        sampling_failures = filter(failed, ots)
        return [
            (sf["organisation_id"], sf["test_id"]) for sf in sampling_failures
            ]

    def specific_failure():
        organisation_code = options.organisation_code.decode('ascii')
        test_id = options.test_id
        organisation_id = dqorganisations.organisationid_by_code(
            organisation_code)

        return [ (organisation_id, test_id) ]

    if options.organisation_code is None:
        db.engine.execute('delete from sampling_failure;')
        data = get_all_results()
    else:
        assert options.test_id
        data = specific_failure()

    sql = '''insert into sampling_failure (organisation_id, test_id)
               values (%s, %s);'''

    for sf in data:
        db.engine.execute(sql, sf)

def create_subparser(subparsers, handler, command):
    subparser = subparsers.add_parser(command)
    subparser.set_defaults(handler=handler)
    return subparser

def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    subparser = create_subparser(subparsers, clear_survey, 'clear-survey')
    subparser.add_argument('--organisation-code', dest='organisation_code', action='store', required=True)

    subparser = create_subparser(subparsers, create_survey, 'create-survey')
    subparser.add_argument('--organisation-code', dest='organisation_code', action='store', required=True)

    subparser = create_subparser(subparsers, list_packages, 'list-packages')
    subparser.add_argument('--organisation-code', dest='organisation_code', action='store', required=True)

    subparser = create_subparser(subparsers, reload_packages, 'reload-packages')
    subparser.add_argument('--organisation-code', dest='organisation_code', action='store', required=True)
    subparser.add_argument('--no-refresh', dest='no_refresh', action='store_true')

    subparser = create_subparser(subparsers, reload_package, 'reload-package')
    subparser.add_argument('--package-name', dest='package_name', action='store', help='Name of package, e.g., dfid-tz', required=True)
    subparser.add_argument('--no-refresh', dest='no_refresh', action='store_true')

    subparser = create_subparser(subparsers, compare_aggregation, 'compare-aggregation')
    subparser.add_argument('--organisation-code', dest='organisation_code', action='store', required=True)
    subparser.add_argument('--filename', dest='filename', action='store')

    subparser = create_subparser(subparsers, compare_summary, 'compare-summary')
    subparser.add_argument('--organisation-code', dest='organisation_code', action='store', required=True)

    subparser = create_subparser(subparsers, compare_indicators_summary, 'compare-indicators-summary')
    subparser.add_argument('--organisation-code', dest='organisation_code', action='store', required=True)

    subparser = create_subparser(subparsers, make_survey_data, 'make-survey-data')
    subparser.add_argument('--organisation-code', dest='organisation_code', action='store', required=True)

    create_subparser(subparsers, make_csv_output, 'make-csv-output')

    create_subparser(subparsers, clear_queues, 'clear-queues')

    subparser = create_subparser(subparsers, associate_test, 'associate-test')
    subparser.add_argument('--test-id', type=int, dest='test_id', action='store', required=True)
    subparser.add_argument('--indicator', dest='indicator', action='store', required=True)

    subparser = create_subparser(subparsers, test_package, 'test-package')
    subparser.add_argument('--package-name', dest='package_name', action='store', help='Name of package, e.g., dfid-tz')
    subparser.add_argument('--package-id', type=int, dest='package_id', action='store', default=None, help='Numerical ID of package')
    subparser.add_argument('--filename', dest='filename', action='store', required=True)
    subparser.add_argument('--runtime-id', dest='runtime_id', type=int, action='store', default=None, help='Numerical id of runtime')

    subparser = create_subparser(subparsers, check_package_results, 'check-package-results')
    subparser.add_argument('--package-name', dest='package_name', action='store', help='Name of package, e.g., dfid-tz')
    subparser.add_argument('--all-packages', dest='all_packages', action='store_true')
    subparser.add_argument('--organisation-code', dest='organisation_code', action='store')

    create_subparser(subparsers, update_frequencies, 'update-frequencies')

    create_subparser(subparsers, update_sampling, 'update-sampling')

    args = parser.parse_args()
    args.handler(args)

if __name__ == '__main__':
    main()
